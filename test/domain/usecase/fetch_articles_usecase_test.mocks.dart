// Mocks generated by Mockito 5.0.17 from annotations
// in simple_news/test/domain/usecase/fetch_articles_usecase_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:fpdart/fpdart.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:simple_news/domain/core/result/failure.dart' as _i6;
import 'package:simple_news/domain/model/article.dart' as _i3;
import 'package:simple_news/domain/repository/my_repository.dart' as _i4;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

class _FakeSource_1 extends _i1.Fake implements _i3.Source {}

class _Fake$ArticleCopyWith_2<$Res> extends _i1.Fake
    implements _i3.$ArticleCopyWith<$Res> {}

/// A class which mocks [MyRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMyRepository extends _i1.Mock implements _i4.MyRepository {
  MockMyRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i3.Article>>> fetchNews(
          {int? page, int? pageSize, String? q}) =>
      (super.noSuchMethod(
          Invocation.method(
              #fetchNews, [], {#page: page, #pageSize: pageSize, #q: q}),
          returnValue: Future<_i2.Either<_i6.Failure, List<_i3.Article>>>.value(
              _FakeEither_0<_i6.Failure, List<_i3.Article>>())) as _i5
          .Future<_i2.Either<_i6.Failure, List<_i3.Article>>>);
}

/// A class which mocks [Article].
///
/// See the documentation for Mockito's code generation for more information.
class MockArticle extends _i1.Mock implements _i3.Article {
  MockArticle() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Source get source => (super.noSuchMethod(Invocation.getter(#source),
      returnValue: _FakeSource_1()) as _i3.Source);
  @override
  String get author =>
      (super.noSuchMethod(Invocation.getter(#author), returnValue: '')
          as String);
  @override
  String get title =>
      (super.noSuchMethod(Invocation.getter(#title), returnValue: '')
          as String);
  @override
  String get description =>
      (super.noSuchMethod(Invocation.getter(#description), returnValue: '')
          as String);
  @override
  String get url =>
      (super.noSuchMethod(Invocation.getter(#url), returnValue: '') as String);
  @override
  String get urlToImage =>
      (super.noSuchMethod(Invocation.getter(#urlToImage), returnValue: '')
          as String);
  @override
  String get publishedAt =>
      (super.noSuchMethod(Invocation.getter(#publishedAt), returnValue: '')
          as String);
  @override
  String get content =>
      (super.noSuchMethod(Invocation.getter(#content), returnValue: '')
          as String);
  @override
  _i3.$ArticleCopyWith<_i3.Article> get copyWith =>
      (super.noSuchMethod(Invocation.getter(#copyWith),
              returnValue: _Fake$ArticleCopyWith_2<_i3.Article>())
          as _i3.$ArticleCopyWith<_i3.Article>);
}
