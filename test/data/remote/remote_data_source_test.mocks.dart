// Mocks generated by Mockito 5.0.17 from annotations
// in simple_news/test/data/remote/remote_data_source_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dio/dio.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:simple_news/data/remote/api_service/my_api_service.dart' as _i3;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeResponse_0<T> extends _i1.Fake implements _i2.Response<T> {}

class _FakeHeaders_1 extends _i1.Fake implements _i2.Headers {}

class _FakeRequestOptions_2 extends _i1.Fake implements _i2.RequestOptions {}

class _FakeUri_3 extends _i1.Fake implements Uri {}

/// A class which mocks [MyApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockMyApiService extends _i1.Mock implements _i3.MyApiService {
  MockMyApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Response<dynamic>> fetchNews(
          {int? page, int? pageSize, String? q}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #fetchNews, [], {#page: page, #pageSize: pageSize, #q: q}),
              returnValue: Future<_i2.Response<dynamic>>.value(
                  _FakeResponse_0<dynamic>()))
          as _i4.Future<_i2.Response<dynamic>>);
}

/// A class which mocks [Response].
///
/// See the documentation for Mockito's code generation for more information.
class MockResponse<T> extends _i1.Mock implements _i2.Response<T> {
  MockResponse() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set data(T? _data) => super.noSuchMethod(Invocation.setter(#data, _data),
      returnValueForMissingStub: null);
  @override
  _i2.Headers get headers => (super.noSuchMethod(Invocation.getter(#headers),
      returnValue: _FakeHeaders_1()) as _i2.Headers);
  @override
  set headers(_i2.Headers? _headers) =>
      super.noSuchMethod(Invocation.setter(#headers, _headers),
          returnValueForMissingStub: null);
  @override
  _i2.RequestOptions get requestOptions =>
      (super.noSuchMethod(Invocation.getter(#requestOptions),
          returnValue: _FakeRequestOptions_2()) as _i2.RequestOptions);
  @override
  set requestOptions(_i2.RequestOptions? _requestOptions) =>
      super.noSuchMethod(Invocation.setter(#requestOptions, _requestOptions),
          returnValueForMissingStub: null);
  @override
  set statusCode(int? _statusCode) =>
      super.noSuchMethod(Invocation.setter(#statusCode, _statusCode),
          returnValueForMissingStub: null);
  @override
  set statusMessage(String? _statusMessage) =>
      super.noSuchMethod(Invocation.setter(#statusMessage, _statusMessage),
          returnValueForMissingStub: null);
  @override
  Map<String, dynamic> get extra =>
      (super.noSuchMethod(Invocation.getter(#extra),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  set extra(Map<String, dynamic>? _extra) =>
      super.noSuchMethod(Invocation.setter(#extra, _extra),
          returnValueForMissingStub: null);
  @override
  List<_i2.RedirectRecord> get redirects =>
      (super.noSuchMethod(Invocation.getter(#redirects),
          returnValue: <_i2.RedirectRecord>[]) as List<_i2.RedirectRecord>);
  @override
  set redirects(List<_i2.RedirectRecord>? _redirects) =>
      super.noSuchMethod(Invocation.setter(#redirects, _redirects),
          returnValueForMissingStub: null);
  @override
  set isRedirect(bool? _isRedirect) =>
      super.noSuchMethod(Invocation.setter(#isRedirect, _isRedirect),
          returnValueForMissingStub: null);
  @override
  Uri get realUri => (super.noSuchMethod(Invocation.getter(#realUri),
      returnValue: _FakeUri_3()) as Uri);
}
